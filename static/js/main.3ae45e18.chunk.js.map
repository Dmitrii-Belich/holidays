{"version":3,"sources":["components/EmployeeSelect/EmployeeSelect.tsx","components/HolidaysCalendar/HolidaysCalendar.tsx","types/holidays.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Option","Select","EmployeeSelect","holidays","handleChange","useState","getUniqueEmployees","employees","setEmployees","useEffect","tagRender","label","value","closable","onClose","color","find","id","onMouseDown","event","preventDefault","stopPropagation","mode","allowClear","defaultValue","getUniqueEmployeesId","style","width","placeholder","onChange","map","name","background","marginBottom","locale","lang","yearFormat","today","now","backToToday","ok","timeSelect","dateSelect","clear","month","year","previousMonth","nextMonth","monthSelect","yearSelect","decadeSelect","dayFormat","dateFormat","dateTimeFormat","previousYear","nextYear","previousDecade","nextDecade","previousCentury","nextCentury","shortWeekDays","shortMonths","timePickerLocale","HolidaysCalendar","reducer","emp","item","existed","e","employee_info","holiday","includes","push","dateCellRender","listData","currentDate","Date","filter","startDate","start_at","endDate","end_at","getListData","format","className","title","uuid","monthCellRender","currentMonth","getFullYear","getMonth","startMonth","endMonth","reduce","getMonthData","Holidays","items","this","activeEmployees","App","isLoading","setIsLoading","setHolidays","setActiveEmployees","filteredHolidays","setFilteredHolidays","getFilteredHolidays","fetch","then","res","json","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ae45e18.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Select, Tag} from 'antd';\nimport {Employee, Holidays} from \"../../types/holidays\";\nimport {DefaultValueType} from \"rc-select/lib/interface/generator\";\n\nconst {Option} = Select;\n\nexport default function EmployeeSelect({\n                                           holidays,\n                                           handleChange\n                                       }: { holidays: Holidays, handleChange(value: number[]): void; }) {\n    const [employees, setEmployees] = useState(holidays.getUniqueEmployees())\n\n    useEffect(() => {\n        setEmployees(holidays.getUniqueEmployees())\n    }, [holidays])\n\n    function tagRender({\n                           label,\n                           value,\n                           closable,\n                           onClose\n                       }: {\n                            label: React.ReactNode;\n                            value: DefaultValueType;\n                            closable: boolean;\n                            onClose: (event?: React.MouseEvent<HTMLElement, MouseEvent>) => void\n                        }) {\n        const onPreventMouseDown = (event: { preventDefault: () => void; stopPropagation: () => void; }) => {\n            event.preventDefault();\n            event.stopPropagation();\n        };\n\n\n        const color = employees.find(({id}: Employee) => id === value) // @ts-ignore\n            ? employees.find(({id}: Employee) => id === value).color\n            : 'gray'\n        return (\n            <Tag\n                color={color}\n                onMouseDown={onPreventMouseDown}\n                closable={closable}\n                onClose={onClose}\n            >\n                {label}\n            </Tag>\n        );\n    }\n\n    return (\n        <div>\n            <Select\n                tagRender={tagRender}\n                mode=\"multiple\"\n                allowClear\n                defaultValue={holidays.getUniqueEmployeesId()}\n                style={{width: '100%'}}\n                placeholder=\"Выберите сотрудника\"\n                onChange={handleChange}\n            >\n                {employees.map(({id, name, color}: Employee) => <Option\n                    style={{background: color, color: 'white', marginBottom: '5px'}} key={id}\n                    value={id}>{name}</Option>)}\n            </Select>\n        </div>\n    );\n}\n","import {Calendar, Tooltip} from 'antd';\nimport './index.css';\nimport {HolidayItem} from '../../types/holidays';\n\nconst locale = {\n    lang: {\n        locale: 'ru_RU',\n        /** Display month before year in date panel header */\n        yearFormat: 'YYYY',\n        today: 'Today',\n        now: 'Now',\n        backToToday: 'Back to today',\n        ok: 'Ok',\n        timeSelect: 'Select time',\n        dateSelect: 'Select date',\n        clear: 'Clear',\n        month: 'Месяц',\n        year: 'Год',\n        previousMonth: 'Previous month (PageUp)',\n        nextMonth: 'Next month (PageDown)',\n        monthSelect: 'Choose a month',\n        yearSelect: 'Choose a year',\n        decadeSelect: 'Choose a decade',\n        dayFormat: 'D',\n        dateFormat: 'M/D/YYYY',\n        dateTimeFormat: 'M/D/YYYY HH:mm:ss',\n        previousYear: 'Last year (Control + left)',\n        nextYear: 'Next year (Control + right)',\n        previousDecade: 'Last decade',\n        nextDecade: 'Next decade',\n        previousCentury: 'Last century',\n        nextCentury: 'Next century',\n        shortWeekDays: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],\n        shortMonths: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\n        placeholder: 'Select date'\n    },\n    timePickerLocale: {\n        placeholder: 'Select time'\n    }\n}\n\nexport default function HolidaysCalendar({holidays}: { holidays: HolidayItem[] }) {\n    function reducer(emp: HolidayItem[], item: HolidayItem) {\n        const existed = emp.find((e: HolidayItem) => e.employee_info.id === item.employee_info.id)\n        if (!existed) {\n            emp.push(item)\n        } else if (!existed.holiday.name.includes(item.holiday.name)) {\n            existed.holiday.name += `, ${item.holiday.name}`\n        }\n        return emp\n    }\n\n    function getListData(value: string) {\n        const currentDate = new Date(value)\n\n        return holidays.filter((item: HolidayItem) => {\n            const startDate = new Date(item.start_at)\n            const endDate = new Date(item.end_at)\n            return currentDate >= startDate && currentDate <= endDate\n        })\n    }\n\n    function dateCellRender(value: {\n        format(dddd: string): string;\n    }) {\n        const listData = getListData(value.format('YYYY-MM-DD'));\n        return (\n            <div className=\"holidays\">\n                {listData.map((item: HolidayItem) => {\n                    return <Tooltip key={item.uuid} title={item.holiday.name}>\n                        <div className=\"month-cell\"\n                             style={{background: item.employee_info.color}}>{item.employee_info.name}</div>\n                    </Tooltip>\n                })}\n            </div>\n        );\n    }\n\n    function getMonthData(value: string) {\n        const currentDate = new Date(value)\n        const currentMonth = `${currentDate.getFullYear()}.${currentDate.getMonth()}`\n\n        return holidays.filter((item: HolidayItem) => {\n            const startDate = new Date(item.start_at)\n            const startMonth = `${startDate.getFullYear()}.${startDate.getMonth()}`\n            const endDate = new Date(item.end_at)\n            const endMonth = `${endDate.getFullYear()}.${endDate.getMonth()}`\n            return currentMonth === startMonth || currentMonth === endMonth\n        }).reduce(reducer, [])\n    }\n\n    function monthCellRender(value: { format(dddd: string): string }) {\n        const listData = getMonthData(value.format('YYYY-MM-DD'));\n        return (<div>\n            {listData.map((item: HolidayItem) =>\n                <Tooltip key={item.uuid} title={item.holiday.name}>\n                    <div className=\"month-cell\" key={item.uuid}\n                         style={{background: item.employee_info.color}}>{item.employee_info.name}</div>\n                </Tooltip>)}\n        </div>)\n    }\n\n    return (\n        <Calendar dateCellRender={dateCellRender} monthCellRender={monthCellRender} locale={locale}/>\n    )\n}\n\n","export interface Employee {\n    \"id\": number;\n    \"name\": string;\n    \"color\": string;\n}\n\nexport interface HolidayItem {\n    \"uuid\": string;\n    \"start_at\": string;\n    \"end_at\": string;\n    \"duration\": number;\n    \"employee_info\": Employee,\n    \"holiday\": {\n        \"id\": number;\n        \"name\": string;\n    }\n}\n\nexport class Holidays {\n    holidays: HolidayItem[]\n\n    constructor(items: HolidayItem[]) {\n        this.holidays = items\n    }\n\n    getFilteredHolidays(activeEmployees: number[]): HolidayItem[] {\n        return this.holidays.filter(({employee_info}) => activeEmployees.includes(employee_info.id))\n    }\n\n    getUniqueEmployees() {\n        return this.holidays.reduce((emp: Employee[], item: HolidayItem) => {\n            if (!emp.find((e: Employee) => e.id === item.employee_info.id)) {\n                emp.push(item.employee_info)\n            }\n            return emp\n        }, [])\n    }\n\n    getUniqueEmployeesId() {\n        return this.getUniqueEmployees().map((item: Employee ) => item.id)\n    }\n}\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport EmployeeSelect from \"./EmployeeSelect/EmployeeSelect\";\nimport {Spin} from 'antd';\nimport HolidaysCalendar from \"./HolidaysCalendar/HolidaysCalendar\";\nimport {Holidays, HolidayItem} from \"../types/holidays\";\n\nfunction App() {\n    const [isLoading, setIsLoading] = useState(true)\n    const [holidays, setHolidays] = useState(new Holidays([]))\n    const [activeEmployees, setActiveEmployees] = useState<number[]>([])\n    const [filteredHolidays, setFilteredHolidays] = useState<HolidayItem[]>([])\n\n    const employeesChangesHandler = (value: number[]): void => {\n        setActiveEmployees(value)\n    }\n\n    useEffect(() => {\n        setFilteredHolidays(holidays.getFilteredHolidays(activeEmployees))\n        setActiveEmployees(holidays.getUniqueEmployeesId())\n    }, [activeEmployees, holidays])\n\n    useEffect(() => {\n        fetch('/holidays/holidays.json').then(res => res.json()).then(res => {\n            setHolidays(new Holidays(res))\n            setIsLoading(false)\n        })\n    }, [])\n\n    return (\n        <div className=\"App\">\n            {isLoading ? <Spin/> :\n                <>\n                    <header>\n                        <EmployeeSelect handleChange={employeesChangesHandler} holidays={holidays}/>\n                    </header>\n                    <main>\n                        <HolidaysCalendar holidays={filteredHolidays}/>\n                    </main>\n                </>\n            }\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}